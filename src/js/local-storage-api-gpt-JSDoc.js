//================================================================
//================================================================
/* local-storage-api.js –∑ JSDoc */

/**
 * local-storage-api.js
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ localStorage –∑ JSDoc —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é
 */

/**
 * Safely saves a value to localStorage.
 *
 * @template T
 * @param {string} key - The key under which to save data.
 * @param {T} value - Any value to store (will be JSON-serialized if not a string).
 * @returns {void}
 */
export function setToLS(key, value) {
  try {
    if (typeof window === 'undefined' || !window.localStorage) return;

    const data = typeof value === 'string' ? value : JSON.stringify(value);
    window.localStorage.setItem(key, data);
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error(`setToLS error for key "${key}":`, err);
    }
  }
}

/**
 * Safely retrieves and parses a value from localStorage.
 *
 * @template T
 * @param {string} key - The key to retrieve.
 * @param {T} [defaultValue=null] - Fallback if not found or invalid.
 * @returns {T|string|null} The parsed value, raw string, or default.
 */
export function getFromLS(key, defaultValue = null) {
  try {
    if (typeof window === 'undefined' || !window.localStorage) {
      return defaultValue;
    }

    const raw = window.localStorage.getItem(key);
    if (raw === null) return defaultValue;

    try {
      return JSON.parse(raw);
    } catch {
      return defaultValue ?? raw;
    }
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error(`getFromLS error for key "${key}":`, err);
    }
    return defaultValue;
  }
}

/**
 * Removes a key from localStorage.
 *
 * @param {string} key - The key to remove.
 * @returns {void}
 */
export function removeFromLS(key) {
  try {
    if (typeof window === 'undefined' || !window.localStorage) return;
    window.localStorage.removeItem(key);
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error(`removeFromLS error for key "${key}":`, err);
    }
  }
}

/**
 * Clears all keys from localStorage.
 *
 * @returns {void}
 */
export function clearLS() {
  try {
    if (typeof window === 'undefined' || !window.localStorage) return;
    window.localStorage.clear();
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error('clearLS error:', err);
    }
  }
}

/* üîπ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ —É VSCode */

import { setToLS, getFromLS, removeFromLS } from './js/local-storage-api.js';

/** @type {{ id: number, name: string, done: boolean }[]} */
const tasks = [
  { id: 1, name: 'Learn JS', done: false },
  { id: 2, name: 'Build project', done: true },
];

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–∞–¥–∞—á
setToLS('tasks', tasks);

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (VSCode –ø—ñ–¥–∫–∞–∂–µ —Ç–∏–ø)
const savedTasks = getFromLS('tasks', []);
console.log(savedTasks[0]?.name); // –∞–≤—Ç–æ–ø—ñ–¥–∫–∞–∑–∫–∞: string

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
setToLS('theme', 'dark');
const theme = getFromLS('theme', 'light'); // theme: string

/* üîë –ü–µ—Ä–µ–≤–∞–≥–∏ JSDoc‚Äë—Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó

    –ê–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç —É VSCode
    VSCode –ø—ñ–¥–∫–∞–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É tasks, –∫–æ–ª–∏ —Ç–∏ –≤–∏—Ç—è–≥–∞—î—à —ó—Ö —ñ–∑ localStorage.

    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∫–æ–¥
    –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –Ω–∞ TypeScript, –∞–ª–µ —î –≤—Å—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥–∫–∞–∑–æ–∫.

    –ì–Ω—É—á–∫—ñ—Å—Ç—å
    –ß–µ—Ä–µ–∑ @template T —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –±—É–¥—å‚Äë—è–∫–∏–π —Ç–∏–ø, —ñ –≤—ñ–Ω –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è —É –ø—ñ–¥–∫–∞–∑–∫–∞—Ö. */
